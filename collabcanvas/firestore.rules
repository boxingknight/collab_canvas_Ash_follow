rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ═══════════════════════════════════════
    // HELPER FUNCTIONS
    // ═══════════════════════════════════════
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }
    
    // ═══════════════════════════════════════
    // USERS COLLECTION
    // ═══════════════════════════════════════
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // ═══════════════════════════════════════
    // WORKSPACES COLLECTION
    // ═══════════════════════════════════════
    
    match /workspaces/{workspaceId} {
      // Anyone can read their own workspaces
      allow read: if isAuthenticated() && isOwner(resource.data.ownerId);
      
      // Anyone can create a workspace (must set themselves as owner)
      allow create: if isAuthenticated() 
        && request.resource.data.ownerId == request.auth.uid;
      
      // Only owner can update or delete workspace
      allow update, delete: if isOwner(resource.data.ownerId);
      
      // Nested canvases subcollection
      match /canvases/{canvasId} {
        // Read: Owner or users with permissions
        allow read: if isAuthenticated() && (
          isOwner(resource.data.ownerId)
          || (resource.data.permissions != null && request.auth.uid in resource.data.permissions)
        );
        
        // Create: Any authenticated user (must set themselves as owner)
        allow create: if isAuthenticated() 
          && request.resource.data.ownerId == request.auth.uid;
        
        // Update: Owner or users with editor permission
        allow update: if isAuthenticated() && (
          isOwner(resource.data.ownerId)
          || (resource.data.permissions != null 
              && request.auth.uid in resource.data.permissions 
              && resource.data.permissions[request.auth.uid] == 'editor')
        );
        
        // Delete: Only owner
        allow delete: if isOwner(resource.data.ownerId);
      }
    }
    
    // ═══════════════════════════════════════
    // CANVASES COLLECTION (Top-level for backward compatibility)
    // ═══════════════════════════════════════
    
    match /canvases/{canvasId} {
      // Read: Owner or users with permissions
      allow read: if isAuthenticated() && (
        isOwner(resource.data.ownerId)
        || (resource.data.permissions != null && request.auth.uid in resource.data.permissions)
      );
      
      // Create: Any authenticated user (must set themselves as owner)
      allow create: if isAuthenticated() 
        && request.resource.data.ownerId == request.auth.uid;
      
      // Update: Owner or users with editor permission
      allow update: if isAuthenticated() && (
        isOwner(resource.data.ownerId)
        || (resource.data.permissions != null 
            && request.auth.uid in resource.data.permissions 
            && resource.data.permissions[request.auth.uid] == 'editor')
      );
      
      // Delete: Only owner
      allow delete: if isOwner(resource.data.ownerId);
    }
    
    // ═══════════════════════════════════════
    // SHAPES COLLECTION
    // ═══════════════════════════════════════
    
    match /shapes/{shapeId} {
      // For now, allow authenticated users (will tighten after canvas migration)
      allow read, write: if isAuthenticated();
    }
    
    // ═══════════════════════════════════════
    // CURSORS COLLECTION (Canvas-scoped)
    // ═══════════════════════════════════════
    
    match /cursors/{canvasId}/users/{userId} {
      // Anyone authenticated can read cursors (will check canvas access in app)
      allow read: if isAuthenticated();
      
      // Users can write their own cursor position
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ═══════════════════════════════════════
    // PRESENCE COLLECTION (Canvas-scoped)
    // ═══════════════════════════════════════
    
    match /presence/{canvasId}/users/{userId} {
      // Anyone authenticated can read presence (will check canvas access in app)
      allow read: if isAuthenticated();
      
      // Users can write their own presence
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ═══════════════════════════════════════
    // SHARE LINKS COLLECTION
    // ═══════════════════════════════════════
    
    match /shareLinks/{token} {
      // Anyone can read share links (to validate)
      allow read: if true;
      
      // Only authenticated users can create share links
      allow write: if isAuthenticated() 
        && request.resource.data.createdBy == request.auth.uid;
    }
    
    // ═══════════════════════════════════════
    // ACTIVITY LOG COLLECTION
    // ═══════════════════════════════════════
    
    match /activityLog/{logId} {
      // Read: User who performed action
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Write: Users can write their own activities
      allow write: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
    }
  }
}
