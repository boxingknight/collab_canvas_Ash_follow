rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ═══════════════════════════════════════
    // HELPER FUNCTIONS
    // ═══════════════════════════════════════
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }
    
    // ═══════════════════════════════════════
    // USERS COLLECTION
    // ═══════════════════════════════════════
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // ═══════════════════════════════════════
    // WORKSPACES COLLECTION
    // ═══════════════════════════════════════
    
    match /workspaces/{workspaceId} {
      // TEMPORARY: Permissive rules during development
      allow read, write: if isAuthenticated();
      
      // Nested canvases subcollection (if used)
      match /canvases/{canvasId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // ═══════════════════════════════════════
    // CANVASES COLLECTION (Top-level for backward compatibility)
    // ═══════════════════════════════════════
    
    match /canvases/{canvasId} {
      // TEMPORARY: Permissive rules during development
      // TODO: Tighten these after migration is complete
      allow read, write: if isAuthenticated();
    }
    
    // ═══════════════════════════════════════
    // SHAPES COLLECTION
    // ═══════════════════════════════════════
    
    match /shapes/{shapeId} {
      // For now, allow authenticated users (will tighten after canvas migration)
      allow read, write: if isAuthenticated();
    }
    
    // ═══════════════════════════════════════
    // CURSORS COLLECTION (Canvas-scoped)
    // ═══════════════════════════════════════
    
    match /cursors/{canvasId}/users/{userId} {
      // Anyone authenticated can read cursors (will check canvas access in app)
      allow read: if isAuthenticated();
      
      // Users can write their own cursor position
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ═══════════════════════════════════════
    // PRESENCE COLLECTION (Canvas-scoped)
    // ═══════════════════════════════════════
    
    match /presence/{canvasId}/users/{userId} {
      // Anyone authenticated can read presence (will check canvas access in app)
      allow read: if isAuthenticated();
      
      // Users can write their own presence
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ═══════════════════════════════════════
    // SHARE LINKS COLLECTION
    // ═══════════════════════════════════════
    
    match /shareLinks/{linkId} {
      // Anyone can read share links (for validation when accessing)
      allow read: if true;
      
      // Create: Only authenticated users, must set themselves as creator
      allow create: if isAuthenticated() 
        && request.resource.data.createdBy == request.auth.uid;
      
      // Update: Creator can update (for accessCount), or any authenticated user (for granting access)
      allow update: if isAuthenticated();
      
      // Delete: Only creator can delete their own links
      allow delete: if isAuthenticated() 
        && resource.data.createdBy == request.auth.uid;
    }
    
    // ═══════════════════════════════════════
    // ACTIVITY LOG COLLECTION
    // ═══════════════════════════════════════
    
    match /activityLog/{logId} {
      // Read: User who performed action
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Write: Users can write their own activities
      allow write: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
    }
  }
}
